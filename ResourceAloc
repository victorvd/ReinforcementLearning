pip install numpy pandas tensorflow gym

import numpy as np
import random
import gym
from gym import spaces

import tensorflow as tf

class SatelliteEnv(gym.Env):
    def __init__(self):
        super(SatelliteEnv, self).__init__()
        self.action_space = spaces.Discrete(3)  # Actions: 0 = Low, 1 = Medium, 2 = High allocation
        self.observation_space = spaces.Box(low=0, high=100, shape=(1,), dtype=np.float32)  # Resource level
        self.state = np.array([50])  # Initial resource level

    def reset(self):
        self.state = np.array([50])  # Reset to initial state
        return self.state

    def step(self, action):
        # Simulate resource allocation based on action
        allocation = action * 25  # Convert action to allocation amount
        reward = self._calculate_reward(allocation)
        self.state[0] = max(0, min(100, self.state[0] - allocation))  # Update state

        done = self.state[0] == 0  # End if resources are depleted
        return self.state, reward, done, {}

    def _calculate_reward(self, allocation):
        # Reward structure based on the efficiency of resource allocation
        if allocation < 10:
            return -1  # Penalty for low allocation
        elif allocation > 60:
            return -1  # Penalty for over-allocation
        else:
            return 1  # Reward for optimal allocation


class DQNAgent:
    def __init__(self, state_size, action_size):
        self.state_size = state_size
        self.action_size = action_size
        self.memory = []
        self.gamma = 0.95    # Discount rate
        self.epsilon = 1.0   # Exploration rate
        self.epsilon_min = 0.01
        self.epsilon_decay = 0.995
        self.model = self._build_model()

    def _build_model(self):
        model = tf.keras.Sequential()
        model.add(tf.keras.layers.Dense(24, input_dim=self.state_size, activation='relu'))
        model.add(tf.keras.layers.Dense(24, activation='relu'))
        model.add(tf.keras.layers.Dense(self.action_size, activation='linear'))
        model.compile(loss='mse', optimizer=tf.keras.optimizers.Adam(learning_rate=0.001))
        return model

    def remember(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    def act(self, state):
        if np.random.rand() <= self.epsilon:
            return random.randrange(self.action_size)
        act_values = self.model.predict(state)
        return np.argmax(act_values[0])  # Returns action with max Q-value

    def replay(self, batch_size):
        minibatch = random.sample(self.memory, batch_size)

        for state, action, reward, next_state, done in minibatch:
            target = reward
            if not done:
                target += self.gamma * np.amax(self.model.predict(next_state)[0])
            target_f = self.model.predict(state)
            target_f[0][action] = target

            self.model.fit(state, target_f, epochs=1, verbose=0)

        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay



if __name__ == "__main__":
    env = SatelliteEnv()
    agent = DQNAgent(state_size=1, action_size=3)

    episodes = 20 #1000

    for e in range(episodes):
        state = env.reset()
        state = np.reshape(state, [1, agent.state_size])

        for time in range(500):  # Limit steps per episode
            action = agent.act(state)
            next_state, reward, done, _ = env.step(action)
            next_state = np.reshape(next_state, [1, agent.state_size])

            agent.remember(state, action, reward, next_state, done)
            state = next_state

            if done:
                print(f"Episode: {e}/{episodes}, score: {time}, e: {agent.epsilon:.2}")
                break

            if len(agent.memory) > 32:
                agent.replay(32)

